///
/// ContactFields.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <cmath>
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::contacts {

  /**
   * An enum which can be represented as a JavaScript enum (ContactFields).
   */
  enum class ContactFields {
    FIRST_NAME      SWIFT_NAME(firstName) = 0,
    LAST_NAME      SWIFT_NAME(lastName) = 1,
    MIDDLE_NAME      SWIFT_NAME(middleName) = 2,
    PHONE_NUMBERS      SWIFT_NAME(phoneNumbers) = 3,
    EMAIL_ADDRESSES      SWIFT_NAME(emailAddresses) = 4,
    IMAGE_DATA      SWIFT_NAME(imageData) = 5,
    THUMBNAIL_IMAGE_DATA      SWIFT_NAME(thumbnailImageData) = 6,
    GIVEN_NAME_KEY      SWIFT_NAME(givenNameKey) = 7,
  } CLOSED_ENUM;

} // namespace margelo::nitro::contacts

namespace margelo::nitro {

  using namespace margelo::nitro::contacts;

  // C++ ContactFields <> JS ContactFields (enum)
  template <>
  struct JSIConverter<ContactFields> {
    static inline ContactFields fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<ContactFields>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, ContactFields arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double integer;
      double fraction = modf(value.getNumber(), &integer);
      if (fraction != 0.0) {
        // It is some kind of floating point number - our enums are ints.
        return false;
      }
      // Check if we are within the bounds of the enum.
      return integer >= 0 && integer <= 7;
    }
  };

} // namespace margelo::nitro
