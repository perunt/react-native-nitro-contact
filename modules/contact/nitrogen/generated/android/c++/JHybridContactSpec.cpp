///
/// JHybridContactSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridContactSpec.hpp"

// Forward declaration of `ContactData` to properly resolve imports.
namespace margelo::nitro::contacts { struct ContactData; }

#include <vector>
#include "ContactData.hpp"
#include "JContactData.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::contacts {

  jni::local_ref<JHybridContactSpec::jhybriddata> JHybridContactSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridContactSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridContactSpec::initHybrid),
    });
  }

  size_t JHybridContactSpec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::vector<ContactData> JHybridContactSpec::getAll(const std::vector<std::string>& keys) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JArrayClass<JContactData>>(jni::alias_ref<jni::JArrayClass<jni::JString>> /* keys */)>("getAll");
    auto result = method(_javaPart, [&]() {
      size_t size = keys.size();
      jni::local_ref<jni::JArrayClass<jni::JString>> array = jni::JArrayClass<jni::JString>::newArray(size);
      for (size_t i = 0; i < size; i++) {
        const auto& element = keys[i];
        array->setElement(i, *jni::make_jstring(element));
      }
      return array;
    }());
    return [&]() {
      size_t size = result->size();
      std::vector<ContactData> vector;
      vector.reserve(size);
      for (size_t i = 0; i < size; i++) {
        auto element = result->getElement(i);
        vector.push_back(element->toCpp());
      }
      return vector;
    }();
  }

} // namespace margelo::nitro::contacts
