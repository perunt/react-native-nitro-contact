///
/// HybridContactTestSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridContactTestSpec.hpp"

// Forward declaration of `HybridContactTestSpecCxx` to properly resolve imports.
namespace NitroContact { class HybridContactTestSpecCxx; }

// Forward declaration of `ContactData` to properly resolve imports.
namespace margelo::nitro::contacts { struct ContactData; }

#include <vector>
#include "ContactData.hpp"
#include <optional>
#include <string>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "NitroContact-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::contacts {

  /**
   * The C++ part of HybridContactTestSpecCxx.swift.
   *
   * HybridContactTestSpecSwift (C++) accesses HybridContactTestSpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridContactTestSpecCxx can directly inherit from the C++ class HybridContactTestSpec
   * to simplify the whole structure and memory management.
   */
  class HybridContactTestSpecSwift: public virtual HybridContactTestSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridContactTestSpecSwift(const NitroContact::HybridContactTestSpecCxx& swiftPart):
      HybridObject(HybridContactTestSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroContact::HybridContactTestSpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::vector<ContactData> getAll(const std::vector<std::string>& keys) override {
      auto __result = _swiftPart.getAll(keys);
      return __result;
    }

  private:
    NitroContact::HybridContactTestSpecCxx _swiftPart;
  };

} // namespace margelo::nitro::contacts
